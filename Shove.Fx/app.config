<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
      <section name="Shove.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
    </sectionGroup>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
  </configSections>
  <appSettings>
    <add key="DataProvider" value="SQLite"/>
    <!--MySQL, MSSQL -->
    <add key="ConnectionString" value="db.s3db"/>
    <!-- /Base/App_Data/db.s3db -->
    <add key="DatabaseReadOnly" value="Fasle"/>
    <!--<add key="isWriteCommandToLogger" value="True"/>-->
  </appSettings>
  <applicationSettings>
    <Shove.Properties.Settings>
      <setting name="Xml2JsonXslt" serializeAs="String">
        <value>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:ebl="urn:ebay:apis:eBLBaseComponents" exclude-result-prefixes="ebl"&gt;
    &lt;!--==================================================================================== 
    Original version by : Holten Norris ( holtennorris at yahoo.com ) 
    Current version maintained  by: Alan Lewis (alanlewis at gmail.com) 
    Thanks to Venu Reddy from eBay XSLT team for help with the array detection code 
    Protected by CDDL open source license.  
    Transforms XML into JavaScript objects, using a JSON format. 
    ===================================================================================== --&gt;
    &lt;xsl:output method="text" encoding="UTF-8"/&gt;
    &lt;xsl:template match="*"&gt;
        &lt;xsl:param name="recursionCnt"&gt;0&lt;/xsl:param&gt;
        &lt;xsl:param name="isLast"&gt;1&lt;/xsl:param&gt;
        &lt;xsl:param name="inArray"&gt;0&lt;/xsl:param&gt;
        &lt;xsl:if test="$recursionCnt=0"&gt;
            &lt;xsl:text&gt;&lt;/xsl:text&gt;
        &lt;/xsl:if&gt;
        &lt;!-- test what type of data to output  --&gt;
        &lt;xsl:variable name="elementDataType"&gt;
            &lt;xsl:value-of select="number(text())"/&gt;
        &lt;/xsl:variable&gt;
        &lt;xsl:variable name="elementData"&gt;
            &lt;!-- TEXT ( use quotes ) --&gt;
            &lt;xsl:if test="string($elementDataType) ='NaN'"&gt;
                &lt;xsl:if test="boolean(text())"&gt;
                    &lt;xsl:if test="not(*)"&gt;
                        "&lt;xsl:value-of select="text()"/&gt;"
                    &lt;/xsl:if&gt;
                &lt;/xsl:if&gt;
            &lt;/xsl:if&gt;
            &lt;!-- NUMBER (no quotes ) --&gt;
            &lt;xsl:if test="string($elementDataType) !='NaN'"&gt;
                &lt;xsl:value-of select="text()"/&gt;
            &lt;/xsl:if&gt;
            &lt;!-- NULL --&gt;
            &lt;xsl:if test="not(*)"&gt;
                &lt;xsl:if test="not(text())"&gt;
                    null
                &lt;/xsl:if&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:variable&gt;
        &lt;xsl:variable name="hasRepeatElements"&gt;
            &lt;xsl:for-each select="*"&gt;
                &lt;xsl:if test="name() = name(preceding-sibling::*) or name() = name(following-sibling::*)"&gt;
                    true
                &lt;/xsl:if&gt;
            &lt;/xsl:for-each&gt;
        &lt;/xsl:variable&gt;
        &lt;xsl:if test="not(count(@*) &amp;gt; 0)"&gt;
            "&lt;xsl:value-of select="local-name()"/&gt;": &lt;xsl:value-of select="$elementData"/&gt;
        &lt;/xsl:if&gt;
        &lt;xsl:if test="count(@*) &amp;gt; 0"&gt;
            "&lt;xsl:value-of select="local-name()"/&gt;": {
            "content": &lt;xsl:value-of select="$elementData"/&gt;
            &lt;xsl:for-each select="@*"&gt;
                &lt;xsl:if test="position()=1"&gt;,&lt;/xsl:if&gt;
                &lt;!-- test what type of data to output  --&gt;
                &lt;xsl:variable name="dataType"&gt;
                    &lt;xsl:value-of select="number(.)"/&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:variable name="data"&gt;
                    &lt;!-- TEXT ( use quotes ) --&gt;
                    &lt;xsl:if test="string($dataType) ='NaN'"&gt;
                        "&lt;xsl:value-of select="current()"/&gt;"
                    &lt;/xsl:if&gt;
                    &lt;!-- NUMBER (no quotes ) --&gt;
                    &lt;xsl:if test="string($dataType) !='NaN'"&gt;
                        &lt;xsl:value-of select="current()"/&gt;
                    &lt;/xsl:if&gt;
                &lt;/xsl:variable&gt;
                &lt;xsl:value-of select="local-name()"/&gt;:&lt;xsl:value-of select="$data"/&gt;
                &lt;xsl:if test="position() !=last()"&gt;, &lt;/xsl:if&gt;
            &lt;/xsl:for-each&gt;
            }
        &lt;/xsl:if&gt;
        &lt;xsl:if test="not($hasRepeatElements = '')"&gt;
            [{
        &lt;/xsl:if&gt;
        &lt;xsl:for-each select="*"&gt;
            &lt;xsl:if test="position()=1"&gt;
                &lt;xsl:if test="$hasRepeatElements = ''"&gt;
                    &lt;xsl:text&gt; { &lt;/xsl:text&gt;
                &lt;/xsl:if&gt;
            &lt;/xsl:if&gt;
            &lt;xsl:apply-templates select="current()"&gt;
                &lt;xsl:with-param name="recursionCnt" select="$recursionCnt+1"/&gt;
                &lt;xsl:with-param name="isLast" select="position()=last()"/&gt;
                &lt;xsl:with-param name="inArray" select="not($hasRepeatElements = '')"/&gt;
            &lt;/xsl:apply-templates&gt;
            &lt;xsl:if test="position()=last()"&gt;
                &lt;xsl:if test="$hasRepeatElements = ''"&gt;
                    &lt;xsl:text&gt; } &lt;/xsl:text&gt;
                &lt;/xsl:if&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:if test="not($hasRepeatElements = '')"&gt;
            }]
        &lt;/xsl:if&gt;
        &lt;xsl:if test="not( $isLast )"&gt;
            &lt;xsl:if test="$inArray = 'true'"&gt;
                &lt;xsl:text&gt; } &lt;/xsl:text&gt;
            &lt;/xsl:if&gt;
            ,
            &lt;xsl:if test="$inArray = 'true'"&gt;
                &lt;xsl:text&gt; { &lt;/xsl:text&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:if&gt;
        &lt;xsl:if test="$recursionCnt=0"&gt;&lt;/xsl:if&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</value>
      </setting>
      <setting name="Shove_I3kmSMS_GatewayService_sms_gateway" serializeAs="String">
        <value>http://sms.gateway.i3km.com/sms_gateway.asmx</value>
      </setting>
      <setting name="Shove_com_shovesoft_icp_Gateway" serializeAs="String">
        <value>http://icp.shovesoft.com/Gateway.asmx</value>
      </setting>
    </Shove.Properties.Settings>
  </applicationSettings>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1"/>
  </startup>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="mssqllocaldb"/>
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"/>
      <provider invariantName="System.Data.SQLite.EF6" type="System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6"/>
    </providers>
  </entityFramework>
  <system.data>
    <DbProviderFactories>
      <remove invariant="System.Data.SQLite.EF6"/>
      <add name="SQLite Data Provider (Entity Framework 6)" invariant="System.Data.SQLite.EF6" description=".NET Framework Data Provider for SQLite (Entity Framework 6)" type="System.Data.SQLite.EF6.SQLiteProviderFactory, System.Data.SQLite.EF6"/>
    <remove invariant="System.Data.SQLite"/><add name="SQLite Data Provider" invariant="System.Data.SQLite" description=".NET Framework Data Provider for SQLite" type="System.Data.SQLite.SQLiteFactory, System.Data.SQLite"/></DbProviderFactories>
  </system.data>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="ICSharpCode.SharpZipLib" publicKeyToken="1b03e6acf1164f73" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-1.1.0.145" newVersion="1.1.0.145"/>
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="log4net" publicKeyToken="669e0ddf0bb1aa2a" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-2.0.8.0" newVersion="2.0.8.0"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>
